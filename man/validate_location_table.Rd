% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/location_table_validation_functions.R
\name{validate_location_table}
\alias{validate_location_table}
\title{Validate any location hierarchy table}
\usage{
validate_location_table(
  table_name,
  input_table,
  check_years = NULL,
  raise_issues_as_errors = TRUE
)
}
\arguments{
\item{table_name}{Name of the type of location table being validated. Must be a valid
table name per \code{get_valid_location_table_names()}.}

\item{input_table}{The location table to be validated for internal consistency}

\item{check_years}{\link{integer, default NULL} Which years of data should be checked? Only
used for the 'annual', and 'change' table types. For these table types, if
\code{check_years} is NULL (the default), checks all unique years listed in the table.}

\item{raise_issues_as_errors}{\link{logical, default TRUE} Should the internal validity
issues be raised as errors? If TRUE (the default), this function checks for all
issues and then errors if any were found. If FALSE, this function returns a list of
issues and prints a warning message if any were found.}
}
\value{
If no issues were found, returns an empty list. If issues were found and
\code{raise_issues_as_errors} is TRUE, throws an error. If issues were found and
\code{raise_issues_as_errors} is FALSE, returns a list of issues.
}
\description{
Validate the internal validity of any location table used for CRVS
spatial analysis
}
\details{
To create a valid location hierarchy over a period of time, the user needs to
create two tables representing that location hierarchy, one representing snapshots of
the location hierarchy in each analysis year, and the other representing changes to a
location hierarchy across years. These tables are validated against each other and
then used to construct three additional useful location tables for CRVS analysis and
modeling. For more details and examples of these tables, check the package vignettes.

each year in an analysis time series. This table must include a complete accounting
of all administrative levels from the top level (states or provinces) down to the
most detailed unit of analysis (for example, districts or cantons) for each year.

REQUIRED FIELDS FOR THE 'annual' TABLE:
\itemize{
\item 'iso': ISO3 code for the country being modeled (character)
\item 'year': Four-digit year (integer)
\item 'level': Standardized administrative level for each location. Top-level
administrative divisions, often called states or provinces, are level 1. The
subdivisions contained within each top-level division, often called counties or
districts, are level 2. The subdivisions within each of those are level 3, and
so on. The top-level country information (level 0) should NOT be included in this
table. (integer)
\item 'adm_code': Uniquely identifying code for each administrative subdivision in the
given year. These codes will often be numeric, but internally they are treated as
strings to catch alphanumeric codes. (character)
\item 'parent_code': Uniquely identifying code for the containing/parent location of a
given administrative subdivision. These should be internally consistent for each
year - for example, the parent codes of level 2 locations should match
identifying codes for level 1 locations. The parent codes for level 1 locations
should be input as NA strings. (character)
\item 'adm_name': Name of the administrative subdivision. (character)
\item 'adm_ascii_name': Name of the administrative subdivision, with all special
characters stripped or replaced with the ASCII equivalents. (character)
}

The 'change' table includes details about changes to the location hierarchy that
occurred over time: for example, one district splitting into two or the boundary
between two counties shifting.

REQUIRED FIELDS FOR THE 'change' TABLE INCLUDE:
\itemize{
\item 'iso': ISO3 code for the country being modeled (character)
\item 'year': The four-digit year when the change in the location hierarchy took place.
Changes are applied immediately at the BEGINNING of a year: for example, if a
new administrative unit is evident in a 2007 location snapshot but not in 2006,
the change in this table indicating that new unit's creation should be assigned
to the year 2007. (integer)
\item 'change_number': Number uniquely representing a particular change in a given year
(as changes can often span multiple table rows) as well as the order in which it
will be applied to the previous year of data. The order of applying changes
matters only for more complicated multi-step administrative redivisions.
Numbering can be sequential across all years in this table, or numbering can
restart at 1 for each year. (integer)
\item 'change_type': The type of change affecting these administrative units. Valid
options include:
* 'SPLIT' - One starting unit splits into two or more units
* 'MERGE' - Two or more starting units merge into a single unit
* 'CODE' - The identifying code for an administrative unit changes, but its
borders remain unaffected
* 'BORDER' - The border between two administrative units changes. In the case
that this border change does not change does not change administrative
codes, 'start_code' and 'end_code' will be the same; for border swaps that
change one or both of the administrative codes, 'start_code' and 'end_code'
can be different.
\item 'level': Level of administrative unit that is affected by these changes. Some
administrative redistricting can affect multiple levels of a location hierarchy;
these should be represented by 2+ distinct records with different levels.
\item 'start_code': The administrative code ('adm_code' in the annual table) for the
administrative unit before the change is applied. For more information, see the
package documentation.
\item 'end_code': The administrative code ('adm_code' in the annual table) for the
administrative unit after the change is applied. For more information, see the
package documentation.
\item 'swap_with': For the 'BORDER' change_type only, what is the uniquely-identifying
code for the administrative unit that swaps territory with this unit? Swaps must
be reciprocal - if one row indicates that unit A swapped with unit B, then
another row with the same 'change_number' must indicate that unit B swapped with
unit A.
}
}
